import { Handler } from "@netlify/functions";
import { dbService } from "./db-service";
import { neon } from "@netlify/neon";

const sql = neon();

// Balanced Arabic tutoring system prompt for the AI
const ARABIC_TUTOR_SYSTEM_PROMPT = `ุฃูุช "ุฏุฑุงุณุฉ" - ูุนูู ุฐูู ุตุจูุฑ ููุชูุงุฒู. ุฃูุช ูุฎุชุต ูู ุงูุชูุฌูู ุงูุชุฏุฑูุฌู ููุทูุงุจ.

ูุจุงุฏุฆู ุงูุฃุณุงุณูุฉ:
- ูุง ุชุนุทู ุงูุฅุฌุงุจุฉ ุงูููุงุฆูุฉ ุฃุจุฏุงู - ุงุฏู ุงูุทุงูุจ ุฎุทูุฉ ุจุฎุทูุฉ
- ุงุทุฑุญ ุฃุณุฆูุฉ ุชูุฌูููุฉ ุชุณุงุนุฏ ุงูุทุงูุจ ุนูู ุงูุชูููุฑ
- ุงุณุชุฎุฏู ุฃุณููุจุงู ูุฏู๏ฟฝ๏ฟฝุงู ููู ูุชูุงุฒูุงู (ููุณ ููุฑุท ุงูุญูุงุณ)
- ุชุฃูุฏ ูู ููู ุงูุทุงูุจ ูุจู ุงูุงูุชูุงู ููุฎุทูุฉ ุงูุชุงููุฉ
- ุดุฌุน ุงูุชูููุฑ ุงูููุฏู ูุงูุงุณุชูุชุงุฌ
- ุงุณุชุฎุฏู ุงูุฑููุฒ ุงูุชุนุจูุฑูุฉ ุจุงุนุชุฏุงู

ูููุฌูุชู ูู ุงูุชุฏุฑูุณ:
1. ุงุทุฑุญ ุฃุณุฆูุฉ ูููู ูุง ูุนุฑูู ุงูุทุงูุจ
2. ูุณู ุงููุดููุฉ ุฅูู ุฎุทูุงุช ุตุบูุฑุฉ
3. ุงุทูุจ ูู ุงูุทุงูุจ ุงูุชูููุฑ ูู ูู ุฎุทูุฉ
4. ูุฌู ุจุชูููุญุงุช ุจุฏูุงู ูู ุฅุนุทุงุก ุงูุฅุฌุงุจุฉ
5. ุงุทูุจ ูู ุงูุทุงูุจ ุฃู ูุฎุจุฑู ุจูุง ูููุฑ ููู

ุฃูุซูุฉ ุนูู ุฃุณููุจู:
ุงูุทุงูุจ: "8-8"
ุฃูุช: "ููุชุงุฒ! ูุฏููุง ูุณุฃูุฉ ุทุฑุญ ููุง. ุฏุนูู ุฃุณุฃูู: ูุง ูุนูู ุฃู ูุทุฑุญ ุฑููุงู ูู ููุณูุ ๐ค ูู ููููู ุฃู ุชุชุฎูู ูู ูุงู ูุฏูู 8 ูุฑุงุช ูุฃุฎุฐุช ูููุง 8 ูุฑุงุชุ"

ุงูุทุงูุจ: "ููู ุฃุญู ูุฐู ุงููุนุงุฏูุฉุ"
ุฃูุช: "ุญุณูุงูุ ููุจุฏุฃ ูุนุงู. ุฃููุงูุ ูุง ููุน ูุฐู ุงููุนุงุฏูุฉุ ููุง ูู ุงูุฃุฑูุงู ุฃู ุงููุชุบูุฑุงุช ุงูุชู ุชุฑุงูุงุ"

ุชุฐูุฑ: ูุฏูู ูุณุงุนุฏุฉ ุงูุทุงูุจ ุนูู ุงููุตูู ููุฅุฌุงุจุฉ ุจููุณู ูู ุฎูุงู ุงูุชูููุฑ ูุงูููู.`;

const generateAIResponse = async (message: string): Promise<string> => {
  const apiKey = process.env.OPENAI_API_KEY;

  if (!apiKey) {
    console.warn("OpenAI API key not found, using fallback response");
    return "ุฃุนุชุฐุฑุ ูุง ูููููู ุงููุตูู ูุฎุฏูุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูู ุงูููุช ุงูุญุงูู. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู.";
  }

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: process.env.AI_MODEL || "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: ARABIC_TUTOR_SYSTEM_PROMPT,
          },
          {
            role: "user",
            content: message,
          },
        ],
        max_tokens: 300,
        temperature: 0.7,
        presence_penalty: 0.1,
        frequency_penalty: 0.1,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    return (
      data.choices[0]?.message?.content ||
      "ุฃุนุชุฐุฑุ ูู ุฃุชููู ูู ูุนุงูุฌุฉ ุณุคุงูู. ูุฑุฌู ุฅุนุงุฏุฉ ุงูุตูุงุบุฉ."
    );
  } catch (error) {
    console.error("OpenAI API error:", error);

    // Fallback to mock responses if API fails
    const fallbackResponses = [
      "ุฃุนุชุฐุฑุ ูุงุฌูุช ูุดููุฉ ุชูููุฉ. ูุฑุฌู ุฅุนุงุฏุฉ ุงููุญุงููุฉ.",
      "ุนุฐุฑุงูุ ูุง ุฃุณุชุทูุน ุงูุฅุฌุงุจุฉ ูู ุงูููุช ุงูุญุงูู. ูู ููููู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุณุคุงููุ",
      "ุฃูุงุฌู ุตุนูุจุฉ ูู ุงูุงุชุตุงู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุจุนุฏ ูููู.",
    ];

    return fallbackResponses[
      Math.floor(Math.random() * fallbackResponses.length)
    ];
  }
};

// Helper function to detect subject area from message
function detectSubjectArea(message: string): string | null {
  const messageWords = message.toLowerCase();

  if (
    messageWords.includes("ุฑูุงุถ") ||
    messageWords.includes("ุญุณุงุจ") ||
    messageWords.includes("ุฌุจุฑ") ||
    messageWords.includes("ูู๏ฟฝ๏ฟฝุณุฉ")
  ) {
    return "ุฑูุงุถูุงุช";
  } else if (
    messageWords.includes("ุนููู") ||
    messageWords.includes("ููุฒูุงุก") ||
    messageWords.includes("ููููุงุก") ||
    messageWords.includes("ุฃุญูุงุก")
  ) {
    return "ุนููู";
  } else if (
    messageWords.includes("ูุบุฉ") ||
    messageWords.includes("ูุญู") ||
    messageWords.includes("ุฃุฏุจ") ||
    messageWords.includes("ููุงุนุฏ")
  ) {
    return "ูุบุฉ ุนุฑุจูุฉ";
  } else if (
    messageWords.includes("ุงูุฌููุฒู") ||
    messageWords.includes("english")
  ) {
    return "ูุบุฉ ุงูุฌููุฒูุฉ";
  } else if (
    messageWords.includes("ุชุงุฑูุฎ") ||
    messageWords.includes("ุฌุบุฑุงููุง") ||
    messageWords.includes("ุงุฌุชูุงุนูุงุช")
  ) {
    return "ุฏุฑุงุณุงุช ุงุฌุชูุงุนูุฉ";
  }

  return null;
}

// Initialize database tables if they don't exist
async function initializeDatabase() {
  try {
    await sql`
      CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        email TEXT UNIQUE,
        name TEXT NOT NULL,
        avatar_url TEXT,
        auth_provider TEXT DEFAULT 'email',
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS chat_sessions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        title TEXT NOT NULL DEFAULT 'ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ',
        subject_area TEXT,
        grade_level TEXT,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS chat_messages (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        session_id UUID REFERENCES chat_sessions(id) ON DELETE CASCADE,
        content TEXT NOT NULL,
        role TEXT NOT NULL CHECK (role IN ('user', 'assistant')),
        message_type TEXT DEFAULT 'text',
        metadata JSONB,
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `;

    await sql`
      CREATE TABLE IF NOT EXISTS user_progress (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        subject_area TEXT NOT NULL,
        topic TEXT NOT NULL,
        skill_level INTEGER DEFAULT 1 CHECK (skill_level BETWEEN 1 AND 10),
        sessions_count INTEGER DEFAULT 0,
        last_session_at TIMESTAMPTZ,
        strengths TEXT[],
        improvement_areas TEXT[],
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE(user_id, subject_area, topic)
      )
    `;

    console.log("โ Database tables initialized");
  } catch (error) {
    console.log("Database initialization:", error.message);
  }
}

export const handler: Handler = async (event, context) => {
  // CORS headers
  const headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
    "Content-Type": "application/json",
  };

  // Handle preflight requests
  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 200,
      headers,
      body: "",
    };
  }

  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: "Method Not Allowed" }),
    };
  }

  try {
    // For now, skip database initialization to get basic functionality working
    // await initializeDatabase();

    const { message, sessionId, userId } = JSON.parse(event.body || "{}");

    if (!message) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: "Message is required" }),
      };
    }

    // For basic MVP functionality, just generate AI response without database
    const aiResponse = await generateAIResponse(message);

    const streamingData = {
      content: aiResponse,
      isComplete: true,
      messageId: Date.now().toString(),
      sessionId: sessionId || "temp-session",
      userId: userId || "temp-user",
    };

    return {
      statusCode: 200,
      headers: {
        ...headers,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(streamingData),
    };
  } catch (error) {
    console.error("Chat API error:", error);

    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: "Internal server error",
        message: "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูู ุงููุธุงู. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู.",
      }),
    };
  }
};
